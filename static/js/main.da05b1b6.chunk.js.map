{"version":3,"sources":["components/MovieRow.js","components/MoviesTable.js","components/Title.js","App.js","reportWebVitals.js","index.js"],"names":["MovieRow","movie","name","seen","MoviesTable","movies","id","map","index","defaultProps","Title","text","link","href","App","useState","error","setError","setMovies","title","useEffect","fetch","headers","then","res","json","result","marvelMovies","className","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MASeA,EATE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OACI,+BACI,6BAAKA,EAAMC,OACX,6BAAKD,EAAME,KAAO,0CAAwB,WCChDC,G,MAAc,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACI,wBAAOC,GAAG,cAAV,UACI,gCACI,+BACI,4CACA,8CAGR,gCAEQD,EAAOE,KAAI,SAACN,EAAOO,GAAR,OAAkB,cAAC,EAAD,CAAsBP,MAAOA,GAAdO,aAOhEJ,EAAYK,aAAe,CACvBJ,OAAQ,CACJ,CACIH,KAAM,qCACNC,MAAM,KASHC,QCzBAM,EAXD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACPC,EAAO,8FAEb,OACI,gCACI,6BAAKD,IACL,sDAAwB,mBAAGE,KAAMD,EAAT,SAAgBA,WC0CrCE,MA3Cf,WACI,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOV,EAAP,KAAea,EAAf,KAEMC,EAAQ,mDAoBd,OAlBAC,qBAAU,WACNC,MAAM,yBAA0B,CAC5BC,QAAS,CACL,eAAgB,mBAChB,OAAU,sBAGbC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACGR,EAAUQ,EAAOC,iBAErB,SAACX,GACGC,EAASD,QAGtB,IAECA,EAEI,sBAAKY,UAAU,YAAf,UACI,cAAC,EAAD,CAAOjB,KAAMQ,IACb,kDAAqBH,EAAMa,cAK/B,sBAAKD,UAAU,YAAf,UACI,cAAC,EAAD,CAAOjB,KAAMQ,IACb,uBACA,cAAC,EAAD,CAAad,OAAQA,IACrB,2BC9BDyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.da05b1b6.chunk.js","sourcesContent":["const MovieRow = ({ movie }) => {\n    return (\n        <tr>\n            <td>{movie.name}</td>\n            <td>{movie.seen ? <span>&#10004;</span> : null}</td>\n        </tr>\n    )\n}\n\nexport default MovieRow\n","import MovieRow from './MovieRow'\nimport PropTypes from 'prop-types'\nimport './MoviesTable.css'\n\n\nconst MoviesTable = ({ movies }) => {\n    return (\n        <table id=\"moviesTable\">\n            <thead>\n                <tr>\n                    <th>Movie/Show</th>\n                    <th>Seen it</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    movies.map((movie, index) => <MovieRow key={index} movie={movie} />)\n                }\n            </tbody>\n        </table>\n    )\n}\n\nMoviesTable.defaultProps = {\n    movies: [\n        {\n            name: \"Captain America: The First Avenger\",\n            seen: true\n        }\n    ]\n}\n\nMoviesTable.propTypes = {\n    movies: PropTypes.array.isRequired\n}\n\nexport default MoviesTable\n","const Title = ({ text }) => {\n    const link = \"https://www.digitalspy.com/movies/a825774/marvel-cinematic-universe-in-chronological-order/\";\n\n    return (\n        <div>\n            <h1>{text}</h1>\n            <h5>List of movies from <a href={link}>{link}</a></h5>\n        </div>\n    )\n}\n\nexport default Title\n","import MoviesTable from './components/MoviesTable'\nimport Title from './components/Title'\nimport { useEffect, useState } from 'react'\n\n\nfunction App() {\n    const [error, setError] = useState(null);\n    const [movies, setMovies] = useState([]);\n\n    const title = \"Marvel Cinematic Universe in Chronological Order\";\n\n    useEffect(() => {\n        fetch(\"data/marvelMovies.json\", {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setMovies(result.marvelMovies);\n                },\n                (error) => {\n                    setError(error);\n                }\n            )\n    }, []);\n\n    if (error) {\n        return (\n            <div className=\"container\">\n                <Title text={title} />\n                <div>Error loading: {error.message}</div>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"container\">\n                <Title text={title} />\n                <br></br>\n                <MoviesTable movies={movies} />\n                <br></br>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}